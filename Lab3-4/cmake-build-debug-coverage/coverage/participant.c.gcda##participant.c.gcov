        -:    0:Source:D:/Programming n shit/UBB/Anul 1/OOP/Lab3-4/Domain/participant.c
        -:    0:Graph:D:\Programming n shit\UBB\Anul 1\OOP\Lab3-4\cmake-build-debug-coverage\CMakeFiles\Lab3_4.dir\Domain\participant.c.gcno
        -:    0:Data:D:\Programming n shit\UBB\Anul 1\OOP\Lab3-4\cmake-build-debug-coverage\CMakeFiles\Lab3_4.dir\Domain\participant.c.gcda
        -:    0:Runs:1
        -:    1:#include "participant.h"
        -:    2:#include "stdlib.h"
        -:    3:#include "string.h"
        -:    4:#include <assert.h>
        -:    5:
        -:    6:struct type_participant{
        -:    7:    char *nume, *prenume;
        -:    8:    int scor;
        -:    9:};
        -:   10:
function create_participant called 17 returned 100% blocks executed 100%
       17:   11:type_participant* create_participant(char* nume, char*prenume, int scor){
       17:   12:    type_participant* participant = malloc(sizeof(type_participant));
        -:   13:
       17:   14:    participant->nume = malloc(strlen(nume) + 1);
       17:   15:    strcpy(participant->nume, nume);
        -:   16:
       17:   17:    participant->prenume = malloc(strlen(prenume) + 1);
       17:   18:    strcpy(participant->prenume, prenume);
        -:   19:
       17:   20:    participant->scor = scor;
        -:   21:
       17:   22:    return participant;
       17:   22-block  0
        -:   23:}
        -:   24:
function destroy_participant called 17 returned 100% blocks executed 100%
       17:   25:void destroy_participant(type_participant* participant){
       17:   26:    free(participant->nume);
       17:   27:    free(participant->prenume);
       17:   28:    free(participant);
       17:   29:}
        -:   30:
function set_nume called 2 returned 100% blocks executed 100%
        2:   31:void set_nume(type_participant* participant, char* nume){
        2:   32:    free(participant->nume);
        -:   33:
        2:   34:    participant->nume = malloc(strlen(nume) + 1);
        2:   35:    strcpy(participant->nume, nume);
        2:   36:}
        -:   37:
function set_prenume called 2 returned 100% blocks executed 100%
        2:   38:void set_prenume(type_participant* participant, char* prenume){
        2:   39:    free(participant->prenume);
        -:   40:
        2:   41:    participant->prenume = malloc(strlen(prenume) + 1);
        2:   42:    strcpy(participant->prenume, prenume);
        2:   43:}
        -:   44:
function set_scor called 2 returned 100% blocks executed 100%
        2:   45:void set_scor(type_participant* participant, int scor){
        2:   46:    participant->scor = scor;
        2:   47:}
        -:   48:
function get_nume called 256 returned 100% blocks executed 100%
      256:   49:const char* get_nume(type_participant* participant){
      256:   50:    return participant->nume;
      256:   50-block  0
        -:   51:}
        -:   52:
function get_prenume called 12 returned 100% blocks executed 100%
       12:   53:const char* get_prenume(type_participant* participant){
       12:   54:    return participant->prenume;
       12:   54-block  0
        -:   55:}
        -:   56:
function get_scor called 262 returned 100% blocks executed 100%
      262:   57:int get_scor(type_participant* participant){
      262:   58:    return participant->scor;
      262:   58-block  0
        -:   59:}
        -:   60:
function domain_test called 1 returned 100% blocks executed 67%
        1:   61:void domain_test(){
        1:   62:    type_participant *participant = create_participant("Morozan", "Dragos", 78);
        1:   62-block  0
call    0 returned 1
       1*:   63:    assert(!strcmp(get_nume(participant), "Morozan"));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   63-block  0
call    3 never executed
        1:   63-block  1
       1*:   64:    assert(!strcmp(get_prenume(participant), "Dragos"));
        1:   64-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   64-block  1
call    3 never executed
        1:   64-block  2
       1*:   65:    assert(get_scor(participant) == 78);
        1:   65-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   65-block  1
call    3 never executed
        1:   65-block  2
        -:   66:
        1:   67:    set_nume(participant, "Matei");
        1:   67-block  0
call    0 returned 1
        1:   68:    set_prenume(participant, "Otniel");
call    0 returned 1
        1:   69:    set_scor(participant, 100);
call    0 returned 1
        -:   70:
       1*:   71:    assert(!strcmp(get_nume(participant), "Matei"));
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   71-block  0
call    3 never executed
        1:   71-block  1
       1*:   72:    assert(!strcmp(get_prenume(participant), "Otniel"));
        1:   72-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   72-block  1
call    3 never executed
        1:   72-block  2
       1*:   73:    assert(get_scor(participant) == 100);
        1:   73-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   73-block  1
call    3 never executed
        1:   73-block  2
        -:   74:
        1:   75:    destroy_participant(participant);
        1:   75-block  0
call    0 returned 1
        1:   76:}
