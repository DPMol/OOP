        -:    0:Source:D:/Programming/Anul 1/OOP/Lab3-4/Repozitory/repozitory.c
        -:    0:Graph:D:\Programming\Anul 1\OOP\Lab3-4\cmake-build-debug-coverage\CMakeFiles\Lab3_4.dir\Repozitory\repozitory.c.gcno
        -:    0:Data:D:\Programming\Anul 1\OOP\Lab3-4\cmake-build-debug-coverage\CMakeFiles\Lab3_4.dir\Repozitory\repozitory.c.gcda
        -:    0:Runs:1
        -:    1:#include "repozitory.h"
        -:    2:#include "stdlib.h"
        -:    3:
        -:    4:typedef struct{
        -:    5:    void **list;
        -:    6:    int size;
        -:    7:    int capacity;
        -:    8:
        -:    9:}repo;
        -:   10:
        -:   11:repo *array;
        -:   12:
function repo_default_values called 1 returned 100% blocks executed 100%
        1:   13:void repo_default_values(){
        -:   14:    type_participant * participant;
        -:   15:
        1:   16:    participant = create_participant("Ciota", "Dragos", 17);
        1:   16-block  0
call    0 returned 1
        1:   17:    repo_add(participant);
call    0 returned 1
        -:   18:
        1:   19:    participant = create_participant("Mircea", "Gabi", 69);
call    0 returned 1
        1:   20:    repo_add(participant);
call    0 returned 1
        -:   21:
        1:   22:    participant = create_participant("Tzanca", "Uraganu", 99);
call    0 returned 1
        1:   23:    repo_add(participant);
call    0 returned 1
        -:   24:
        1:   25:    participant = create_participant("Ciorba", "Sandu", 45);
call    0 returned 1
        1:   26:    repo_add(participant);
call    0 returned 1
        -:   27:
        1:   28:    participant = create_participant("Moldovan", "Denis-Angel", 45);
call    0 returned 1
        1:   29:    repo_add(participant);
call    0 returned 1
        1:   30:}
        -:   31:
function repo_initialization called 1 returned 100% blocks executed 100%
        1:   32:void repo_initialization(){
        1:   33:    array = (repo *)malloc(sizeof(repo));
        1:   34:    array->size = 0;
        1:   35:    array->capacity = 60;
        1:   36:    array->list = malloc(array->capacity* sizeof(type_participant*));
        1:   37:    repo_default_values();
        1:   37-block  0
call    0 returned 1
        1:   38:}
        -:   39:
function repo_destructor called 1 returned 100% blocks executed 100%
        1:   40:void repo_destructor(){
        6:   41:    for(int i = 0; i < array->size; i++)
        1:   41-block  0
        6:   41-block  1
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:   42:        free(array->list[i]);
        5:   42-block  0
        1:   43:    free (array->list);
        1:   44:}
        -:   45:
function repo_realloc called 0 returned 0% blocks executed 0%
    #####:   46:void repo_realloc(int newcapacity){
    #####:   47:    void **newlist = malloc(newcapacity* sizeof(type_participant*));
    #####:   48:    for(int i = 0; i < array->size; i++){
    %%%%%:   48-block  0
    %%%%%:   48-block  1
branch  0 never executed
branch  1 never executed
    #####:   49:        newlist[i] = array->list[i];
    %%%%%:   49-block  0
        -:   50:    }
    #####:   51:    free(array->list);
    #####:   52:    array->list = newlist;
    #####:   53:    array->capacity = newcapacity;
    #####:   54:}
        -:   55:
function repo_delete called 0 returned 0% blocks executed 0%
    #####:   56:int repo_delete(int id){
    #####:   57:    if(id >= array->size)
    %%%%%:   57-block  0
branch  0 never executed
branch  1 never executed
    #####:   58:        return 0;
    %%%%%:   58-block  0
    #####:   59:    array->size--;
    #####:   60:    destory_participant(array->list[id]);
    %%%%%:   60-block  0
call    0 never executed
    #####:   61:    for(int i = id; i < array->size; i++){
    %%%%%:   61-block  0
branch  0 never executed
branch  1 never executed
    #####:   62:        array->list[i] = array->list[i+1];}
    %%%%%:   62-block  0
    #####:   63:    return 1;
    %%%%%:   63-block  0
        -:   64:}
        -:   65:
function repo_add called 5 returned 100% blocks executed 67%
        5:   66:void repo_add(type_participant *participant){
        5:   67:    if(array->size >= array->capacity){
        5:   67-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:   68:        repo_realloc(2 * array->size);
    %%%%%:   68-block  0
call    0 never executed
        -:   69:    }
        5:   70:    array->list[array->size++] = participant;
        5:   71:}
        -:   72:
function repo_get_by_id called 5 returned 100% blocks executed 75%
        5:   73:type_participant * repo_get_by_id(int id){
        5:   74:    if(id >= array->size)
        5:   74-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:   75:        return NULL;
    %%%%%:   75-block  0
        5:   76:    return array->list[id];
        5:   76-block  0
        -:   77:}
        -:   78:
function repo_get_size called 1 returned 100% blocks executed 100%
        1:   79:int repo_get_size(){
        1:   80:    return array->size;
        1:   80-block  0
        -:   81:}
