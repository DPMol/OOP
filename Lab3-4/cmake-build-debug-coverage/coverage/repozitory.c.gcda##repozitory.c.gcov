        -:    0:Source:D:/Programming n shit/UBB/Anul 1/OOP/Lab3-4/Repozitory/repozitory.c
        -:    0:Graph:D:\Programming n shit\UBB\Anul 1\OOP\Lab3-4\cmake-build-debug-coverage\CMakeFiles\Lab3_4.dir\Repozitory\repozitory.c.gcno
        -:    0:Data:D:\Programming n shit\UBB\Anul 1\OOP\Lab3-4\cmake-build-debug-coverage\CMakeFiles\Lab3_4.dir\Repozitory\repozitory.c.gcda
        -:    0:Runs:1
        -:    1:#include "repozitory.h"
        -:    2:#include "stdlib.h"
        -:    3:#include <assert.h>
        -:    4:
        -:    5:struct repo{
        -:    6:    void **list;
        -:    7:    int size;
        -:    8:    int capacity;
        -:    9:};
        -:   10:
function repo_default_values called 3 returned 100% blocks executed 100%
        3:   11:void repo_default_values(repo* array){
        -:   12:    type_participant * participant;
        -:   13:
        3:   14:    participant = create_participant("Ciota", "Dragos", 17);
        3:   14-block  0
call    0 returned 3
        3:   15:    repo_add(array, participant);
call    0 returned 3
        -:   16:
        3:   17:    participant = create_participant("Mircea", "Gabi", 69);
call    0 returned 3
        3:   18:    repo_add(array, participant);
call    0 returned 3
        -:   19:
        3:   20:    participant = create_participant("Tzanca", "Uraganu", 50);
call    0 returned 3
        3:   21:    repo_add(array, participant);
call    0 returned 3
        -:   22:
        3:   23:    participant = create_participant("Neamtu", "Iuli", 99);
call    0 returned 3
        3:   24:    repo_add(array, participant);
call    0 returned 3
        -:   25:
        3:   26:    participant = create_participant("Moldovan", "Denis-Angel", 10);
call    0 returned 3
        3:   27:    repo_add(array, participant);
call    0 returned 3
        3:   28:}
        -:   29:
function repo_initialization called 3 returned 100% blocks executed 100%
        3:   30:repo* repo_initialization(){
        3:   31:    repo *array = malloc(sizeof(repo));
        3:   32:    array->size = 0;
        3:   33:    array->capacity = 2;
        3:   34:    array->list = malloc(array->capacity* sizeof(type_participant*));
        3:   35:    repo_default_values(array);
        3:   35-block  0
call    0 returned 3
        -:   36:
        3:   37:    return array;
        -:   38:}
        -:   39:
function repo_destructor called 3 returned 100% blocks executed 100%
        3:   40:void repo_destructor(repo* array){
       17:   41:    for(int i = 0; i < array->size; i++){
        3:   41-block  0
       17:   41-block  1
branch  0 taken 14
branch  1 taken 3 (fallthrough)
       14:   42:        destroy_participant(array->list[i]);}
       14:   42-block  0
call    0 returned 14
        3:   43:    free (array->list);
        3:   44:    free(array);
        3:   45:}
        -:   46:
function repo_realloc called 7 returned 100% blocks executed 100%
        7:   47:void repo_realloc(repo* array, int newcapacity){
        7:   48:    void **newlist = malloc(newcapacity* sizeof(type_participant*));
       30:   49:    for(int i = 0; i < array->size; i++){
        7:   49-block  0
       30:   49-block  1
branch  0 taken 23
branch  1 taken 7 (fallthrough)
       23:   50:        newlist[i] = array->list[i];
       23:   50-block  0
        -:   51:    }
        7:   52:    free(array->list);
        7:   53:    array->list = newlist;
        7:   54:    array->capacity = newcapacity;
        7:   55:}
        -:   56:
function repo_delete called 3 returned 100% blocks executed 100%
        3:   57:int repo_delete(repo* array, int id){
        3:   58:    if(id >= array->size)
        3:   58-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   59:        return 0;
        1:   59-block  0
        2:   60:    array->size--;
        2:   61:    destroy_participant(array->list[id]);
        2:   61-block  0
call    0 returned 2
       11:   62:    for(int i = id; i < array->size; i++){
       11:   62-block  0
branch  0 taken 9
branch  1 taken 2 (fallthrough)
        9:   63:        array->list[i] = array->list[i+1];}
        9:   63-block  0
        2:   64:    return 1;
        2:   64-block  0
        -:   65:}
        -:   66:
function repo_add called 17 returned 100% blocks executed 100%
       17:   67:void repo_add(repo* array, type_participant *participant){
       17:   68:    if(array->size >= array->capacity){
       17:   68-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 11
        6:   69:        repo_realloc(array, 2 * array->size);
        6:   69-block  0
call    0 returned 6
        -:   70:    }
       17:   71:    array->list[array->size++] = participant;
       17:   72:}
        -:   73:
function repo_get_by_id called 14 returned 100% blocks executed 100%
       14:   74:type_participant * repo_get_by_id(repo* array, int id){
       14:   75:    if(id >= array->size)
       14:   75-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 13
        1:   76:        return NULL;
        1:   76-block  0
       13:   77:    return array->list[id];
       13:   77-block  0
        -:   78:}
        -:   79:
function repo_get_size called 5 returned 100% blocks executed 100%
        5:   80:int repo_get_size(repo* array){
        5:   81:    return array->size;
        5:   81-block  0
        -:   82:}
        -:   83:/*
        -:   84:void repo_scor_sort_increasing(repo* array){
        -:   85:    type_participant* temp;
        -:   86:    for(int i = 0; i < array->size; i++)
        -:   87:        for(int j = 0; j< array->size; j++)
        -:   88:            if(get_scor(array->list[i]) < get_scor(array->list[j])){
        -:   89:                temp = array->list[i];
        -:   90:                array->list[i] = array->list[j];
        -:   91:                array->list[j] = temp;
        -:   92:            }
        -:   93:}
        -:   94:
        -:   95:void repo_scor_sort_decreasing(repo* array){
        -:   96:    type_participant* temp;
        -:   97:    for(int i = 0; i < array->size; i++)
        -:   98:        for(int j = 0; j< array->size; j++)
        -:   99:            if(get_scor(array->list[i]) > get_scor(array->list[j])){
        -:  100:                temp = array->list[i];
        -:  101:                array->list[i] = array->list[j];
        -:  102:                array->list[j] = temp;
        -:  103:            }
        -:  104:}
        -:  105:
        -:  106:void repo_name_sort_increasing(repo* array){
        -:  107:    type_participant* temp;
        -:  108:    for(int i = 0; i < array->size; i++)
        -:  109:        for(int j = 0; j< array->size; j++)
        -:  110:            if(strcmp(get_nume(array->list[i]), get_nume(array->list[j])) < 0){
        -:  111:                temp = array->list[i];
        -:  112:                array->list[i] = array->list[j];
        -:  113:                array->list[j] = temp;
        -:  114:            }
        -:  115:}
        -:  116:
        -:  117:void repo_name_sort_decreasing(repo* array){
        -:  118:    type_participant* temp;
        -:  119:    for(int i = 0; i < array->size; i++)
        -:  120:        for(int j = 0; j< array->size; j++)
        -:  121:            if(strcmp(get_nume(array->list[i]), get_nume(array->list[j])) > 0){
        -:  122:                temp = array->list[i];
        -:  123:                array->list[i] = array->list[j];
        -:  124:                array->list[j] = temp;
        -:  125:            }
        -:  126:}
        -:  127:*/
        -:  128:
function repo_scor_sort called 2 returned 100% blocks executed 100%
        2:  129:void repo_scor_sort(repo* array, int(*cmp)(const int, const int)){
        -:  130:    type_participant* temp;
       14:  131:    for(int i = 0; i < array->size; i++)
        2:  131-block  0
       12:  131-block  1
       14:  131-block  2
branch  0 taken 12
branch  1 taken 2 (fallthrough)
       84:  132:        for(int j = 0; j< array->size; j++)
       12:  132-block  0
       72:  132-block  1
       84:  132-block  2
branch  0 taken 72
branch  1 taken 12 (fallthrough)
       72:  133:            if(cmp(get_scor(array->list[i]), get_scor(array->list[j]))){
       72:  133-block  0
call    0 returned 72
call    1 returned 72
call    2 returned 72
branch  3 taken 32 (fallthrough)
branch  4 taken 40
       32:  134:                temp = array->list[i];
       32:  135:                array->list[i] = array->list[j];
       32:  136:                array->list[j] = temp;
       32:  136-block  0
        -:  137:            }
        2:  138:}
        -:  139:
function repo_nume_sort called 2 returned 100% blocks executed 100%
        2:  140:void repo_nume_sort(repo* array, int(*cmp)(const char*, const char*)){
        -:  141:    type_participant* temp;
       14:  142:    for(int i = 0; i < array->size; i++)
        2:  142-block  0
       12:  142-block  1
       14:  142-block  2
branch  0 taken 12
branch  1 taken 2 (fallthrough)
       84:  143:        for(int j = 0; j< array->size; j++)
       12:  143-block  0
       72:  143-block  1
       84:  143-block  2
branch  0 taken 72
branch  1 taken 12 (fallthrough)
       72:  144:            if(cmp(get_nume(array->list[i]), get_nume(array->list[j]))){
       72:  144-block  0
call    0 returned 72
call    1 returned 72
call    2 returned 72
branch  3 taken 38 (fallthrough)
branch  4 taken 34
       38:  145:                temp = array->list[i];
       38:  146:                array->list[i] = array->list[j];
       38:  147:                array->list[j] = temp;
       38:  147-block  0
        -:  148:            }
        2:  149:}
        -:  150:
function repo_test called 1 returned 100% blocks executed 65%
        1:  151:void repo_test(){
        1:  152:    repo *repo = NULL;
        1:  153:    repo = repo_initialization();
        1:  153-block  0
call    0 returned 1
        -:  154:
       1*:  155:    assert(repo != NULL);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  155-block  0
call    2 never executed
        1:  155-block  1
       1*:  156:    assert(repo_get_size(repo) == 5);
        1:  156-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  156-block  1
call    3 never executed
        1:  156-block  2
        1:  157:    type_participant* participant = repo_get_by_id(repo, 0);
        1:  157-block  0
call    0 returned 1
        -:  158:
       1*:  159:    assert(get_scor(participant) == 17);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  159-block  0
call    3 never executed
        1:  159-block  1
        -:  160:
        1:  161:    repo_add(repo, participant);
        1:  161-block  0
call    0 returned 1
       1*:  162:    assert(repo_get_size(repo) == 6);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  162-block  0
call    3 never executed
        1:  162-block  1
       1*:  163:    assert(repo_get_by_id(repo, 5) == participant);
        1:  163-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  163-block  1
call    3 never executed
        1:  163-block  2
        -:  164:
        1:  165:    repo_delete(repo, 0);
        1:  165-block  0
call    0 returned 1
       1*:  166:    assert(repo_get_size(repo) == 5);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  166-block  0
call    3 never executed
        1:  166-block  1
        -:  167:
        1:  168:    repo_realloc(repo, 100);
        1:  168-block  0
call    0 returned 1
       1*:  169:    assert(repo->capacity == 100);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  169-block  0
call    2 never executed
        1:  169-block  1
        -:  170:
        -:  171:    /*
        -:  172:    repo_scor_sort_increasing(repo);
        -:  173:    assert(repo_get_by_id(repo, 1) == participant);
        -:  174:
        -:  175:    repo_scor_sort_decreasing(repo);
        -:  176:    assert(repo_get_by_id(repo, 3) == participant);
        -:  177:
        -:  178:    repo_name_sort_decreasing(repo);
        -:  179:    assert(repo_get_by_id(repo, 0) == participant);
        -:  180:
        -:  181:    repo_name_sort_increasing(repo);
        -:  182:    assert(repo_get_by_id(repo, 4) == participant);
        -:  183:     */
        1:  184:    repo->size--;
        -:  185:
        1:  186:    repo_destructor(repo);
        1:  186-block  0
call    0 returned 1
        1:  187:}
