        -:    0:Source:D:/Programming n shit/UBB/Anul 1/OOP/Lab3-4/Service/service.c
        -:    0:Graph:D:\Programming n shit\UBB\Anul 1\OOP\Lab3-4\cmake-build-debug-coverage\CMakeFiles\Lab3_4.dir\Service\service.c.gcno
        -:    0:Data:D:\Programming n shit\UBB\Anul 1\OOP\Lab3-4\cmake-build-debug-coverage\CMakeFiles\Lab3_4.dir\Service\service.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include "service.h"
        -:    4:#include "stdio.h"
        -:    5:#include "assert.h"
        -:    6:
        -:    7:
        -:    8:struct service{
        -:    9:    repo* repo;
        -:   10:};
        -:   11:
function service_initialization called 2 returned 100% blocks executed 100%
        2:   12:service* service_initialization(repo* repo){
        2:   13:    service* srv = malloc(sizeof(service));
        2:   14:    srv->repo = repo;
        2:   15:    return srv;
        2:   15-block  0
        -:   16:}
        -:   17:
function service_destructor called 2 returned 100% blocks executed 100%
        2:   18:void service_destructor(service *srv){
        2:   19:    free(srv);
        2:   20:}
        -:   21:
function service_delete called 3 returned 100% blocks executed 100%
        3:   22:int service_delete(service* srv, char *id){
        3:   23:    if(!is_id(id))
        3:   23-block  0
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1:   24:        return 0;
        1:   24-block  0
        2:   25:    if(repo_delete(srv->repo, atoi(id)) == 1)
        2:   25-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:   26:        return 1;
        1:   26-block  0
        1:   27:    return 2;
        1:   27-block  0
        -:   28:}
        -:   29:
function service_show called 2 returned 100% blocks executed 100%
        2:   30:char* service_show(service* srv, char* scor){
        2:   31:    if(!is_score(scor))
        2:   31-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:   32:        return NULL;
        1:   32-block  0
        -:   33:
        -:   34:    type_participant *participant;
        1:   35:    int end = repo_get_size(srv->repo);
        1:   35-block  0
call    0 returned 1
        -:   36:
        1:   37:    int intscor = atoi(scor);
call    0 returned 1
        -:   38:
        1:   39:    char *out = malloc(end * 300);
        1:   40:    out[0] = '\0';
        -:   41:    char cscor[4];
        6:   42:    for(int i = 0; i < end; i++){
        5:   42-block  0
        6:   42-block  1
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -:   43:
        5:   44:        participant = repo_get_by_id(srv->repo,i);
        5:   44-block  0
call    0 returned 5
        -:   45:
        5:   46:        if(get_scor(participant) >= intscor) {
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        5:   47:            strcat(out, get_nume(participant));
        5:   47-block  0
call    0 returned 5
        5:   48:            strcat(out, " ");
        5:   49:            strcat(out, get_prenume(participant));
call    0 returned 5
        -:   50:
        5:   51:            strcat(out, " ");
        -:   52:
        5:   53:            sprintf(cscor, "%d", get_scor(participant));
call    0 returned 5
call    1 returned 5
        -:   54:
        5:   55:            strcat(out, cscor);
        5:   56:            strcat(out, "/100\n");
        -:   57:
        -:   58:        }
        -:   59:    }
        1:   60:    return out;
        1:   60-block  0
        -:   61:
        -:   62:}
        -:   63:
function service_sort called 7 returned 100% blocks executed 100%
        7:   64:int service_sort(service* srv, char* key, char* order){
        7:   65:    if(!(is_key(key) && is_order(order)))
        7:   65-block  0
call    0 returned 7
branch  1 taken 6 (fallthrough)
branch  2 taken 1
        6:   65-block  1
call    3 returned 6
branch  4 taken 2 (fallthrough)
branch  5 taken 4
        3:   66:        return 0;
        3:   66-block  0
        4:   67:    if(!strcmp(key, "scor")) {
        4:   67-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:   68:        if (!strcmp(order, "+"))
        2:   68-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   69:            repo_scor_sort_increasing(srv->repo);
        1:   69-block  0
call    0 returned 1
        -:   70:        else
        1:   71:            repo_scor_sort_decreasing(srv->repo);
        1:   71-block  0
call    0 returned 1
        -:   72:    }
        -:   73:    else{
        2:   74:        if (!strcmp(order, "+"))
        2:   74-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   75:            repo_name_sort_increasing(srv->repo);
        1:   75-block  0
call    0 returned 1
        -:   76:        else
        1:   77:            repo_name_sort_decreasing(srv->repo);
        1:   77-block  0
call    0 returned 1
        -:   78:    }
        -:   79:
        4:   80:    return 1;
        4:   80-block  0
        -:   81:}
        -:   82:
function service_debug called 1 returned 100% blocks executed 100%
        1:   83:char* service_debug(service* srv){
        1:   84:    int end = repo_get_size(srv->repo);
        1:   84-block  0
call    0 returned 1
        1:   85:    char *out = (char *) malloc(end*224);
        -:   86:    char scor[4];
        1:   87:    out[0] = 0;
        -:   88:    type_participant *participant;
        6:   89:    for(int i = 0; i < end; i++){
        6:   89-block  0
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:   90:        participant = repo_get_by_id(srv->repo,i);
        5:   90-block  0
call    0 returned 5
        5:   91:        strcat(out, get_nume(participant));
call    0 returned 5
        5:   92:        strcat(out, " ");
        5:   93:        strcat(out, get_prenume(participant));
call    0 returned 5
        5:   94:        strcat(out, " ");
        5:   95:        sprintf(scor,"%d", get_scor(participant));
call    0 returned 5
call    1 returned 5
        5:   96:        strcat(out, scor);
        5:   97:        strcat(out, "/100\n");
        -:   98:    }
        1:   99:    return out;
        1:   99-block  0
        -:  100:}
        -:  101:
function service_modify called 3 returned 100% blocks executed 100%
        3:  102:int service_modify(service* srv, char *id, char *nume, char *prenume, char *scor){
        3:  103:    if(!(is_name(nume) && is_name(prenume) && is_score(scor) && is_id(id)))
        3:  103-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3:  103-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        3:  103-block  2
call    6 returned 3
branch  7 taken 2 (fallthrough)
branch  8 taken 1
        2:  103-block  3
call    9 returned 2
branch 10 taken 0 (fallthrough)
branch 11 taken 2
        1:  104:        return 0;
        1:  104-block  0
        2:  105:    type_participant *participant = repo_get_by_id(srv->repo,atoi(id));
        2:  105-block  0
call    0 returned 2
call    1 returned 2
        2:  106:    if(participant == NULL)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  107:        return 2;
        1:  107-block  0
        -:  108:
        1:  109:    set_nume(participant, nume);
        1:  109-block  0
call    0 returned 1
        1:  110:    set_prenume(participant, prenume);
call    0 returned 1
        1:  111:    set_scor(participant, atoi(scor));
call    0 returned 1
call    1 returned 1
        1:  112:    return 1;
        -:  113:}
        -:  114:
function service_add called 2 returned 100% blocks executed 100%
        2:  115:int service_add(service* srv, char *nume, char *prenume, char *scor){
        2:  116:    if(!(is_name(nume) && is_name(prenume) && is_score(scor)))
        2:  116-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  116-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        2:  116-block  2
call    6 returned 2
branch  7 taken 1 (fallthrough)
branch  8 taken 1
        1:  117:        return 0;
        1:  117-block  0
        1:  118:    type_participant *participant = create_participant(nume, prenume, atoi(scor));
        1:  118-block  0
call    0 returned 1
call    1 returned 1
        1:  119:    repo_add(srv->repo, participant);
call    0 returned 1
        1:  120:    return 1;
        -:  121:}
        -:  122:
function service_test called 1 returned 100% blocks executed 62%
        1:  123:void service_test(){
        1:  124:    repo* repo = repo_initialization();
        1:  124-block  0
call    0 returned 1
        1:  125:    service* srv = service_initialization(repo);
call    0 returned 1
        1:  126:    char* out = service_show(srv, "10");
call    0 returned 1
        -:  127:
       1*:  128:    assert(strlen(out) != 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  128-block  0
call    2 never executed
        1:  128-block  1
        1:  129:    free(out);
        1:  130:    out = service_debug(srv);
        1:  130-block  0
call    0 returned 1
       1*:  131:    assert(!strcmp(out, "Ciota Dragos 17/100\n"
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  131-block  0
call    2 never executed
        1:  131-block  1
        -:  132:                                       "Mircea Gabi 69/100\n"
        -:  133:                                       "Tzanca Uraganu 50/100\n"
        -:  134:                                       "Neamtu Iuli 99/100\n"
        -:  135:                                       "Moldovan Denis-Angel 10/100\n"));
        -:  136:
        1:  137:    free(out);
        -:  138:
       1*:  139:    assert(service_add(srv, "Oti" ,"Linux", "69") == 1);
        1:  139-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  139-block  1
call    3 never executed
        1:  139-block  2
       1*:  140:    assert(service_add(srv, "Oti" ,"Linux", "sasenoua") == 0);
        1:  140-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  140-block  1
call    3 never executed
        1:  140-block  2
        -:  141:
       1*:  142:    assert(service_modify(srv,"1", "Oti" ,"Linux", "sasenoua") == 0);
        1:  142-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  142-block  1
call    3 never executed
        1:  142-block  2
       1*:  143:    assert(service_modify(srv,"1", "Oti" ,"Linux", "26") == 1);
        1:  143-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  143-block  1
call    3 never executed
        1:  143-block  2
       1*:  144:    assert(service_modify(srv,"100", "Oti" ,"Linux", "10") == 2);
        1:  144-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  144-block  1
call    3 never executed
        1:  144-block  2
        -:  145:
       1*:  146:    assert(service_sort(srv, "Gabi", "GABITZU") == 0);
        1:  146-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  146-block  1
call    3 never executed
        1:  146-block  2
       1*:  147:    assert(service_sort(srv, "nume", "+"));
        1:  147-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  147-block  1
call    3 never executed
        1:  147-block  2
       1*:  148:    assert(!service_sort(srv, "nume", "da"));
        1:  148-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  148-block  1
call    3 never executed
        1:  148-block  2
       1*:  149:    assert(service_sort(srv, "nume", "-"));
        1:  149-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  149-block  1
call    3 never executed
        1:  149-block  2
       1*:  150:    assert(!service_sort(srv, "scor", "da"));
        1:  150-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  150-block  1
call    3 never executed
        1:  150-block  2
       1*:  151:    assert(service_sort(srv, "scor", "+"));
        1:  151-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  151-block  1
call    3 never executed
        1:  151-block  2
       1*:  152:    assert(service_sort(srv, "scor", "-"));
        1:  152-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  152-block  1
call    3 never executed
        1:  152-block  2
        -:  153:
       1*:  154:    assert(service_delete(srv, "1"));
        1:  154-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  154-block  1
call    3 never executed
        1:  154-block  2
       1*:  155:    assert(service_delete(srv, "100"));
        1:  155-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  155-block  1
call    3 never executed
        1:  155-block  2
       1*:  156:    assert(!service_delete(srv, "a1"));
        1:  156-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  156-block  1
call    3 never executed
        1:  156-block  2
        -:  157:
       1*:  158:    assert(service_show(srv, "ab") == NULL);
        1:  158-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  158-block  1
call    3 never executed
        1:  158-block  2
        -:  159:
        -:  160:
        1:  161:    service_destructor(srv);
        1:  161-block  0
call    0 returned 1
        1:  162:    repo_destructor(repo);
call    0 returned 1
        1:  163:}
