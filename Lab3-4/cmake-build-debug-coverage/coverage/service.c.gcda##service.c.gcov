        -:    0:Source:D:/Programming n shit/UBB/Anul 1/OOP/Lab3-4/Service/service.c
        -:    0:Graph:D:\Programming n shit\UBB\Anul 1\OOP\Lab3-4\cmake-build-debug-coverage\CMakeFiles\Lab3_4.dir\Service\service.c.gcno
        -:    0:Data:D:\Programming n shit\UBB\Anul 1\OOP\Lab3-4\cmake-build-debug-coverage\CMakeFiles\Lab3_4.dir\Service\service.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include "service.h"
        -:    4:#include "stdio.h"
        -:    5:#include "assert.h"
        -:    6:
function plus called 36 returned 100% blocks executed 100%
       36:    7:int plus(int a, int b){
       36:    8:    if(a<b){
       36:    8-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 16
       20:    9:        return 0;
       20:    9-block  0
        -:   10:    }
       16:   11:    return 1;
       16:   11-block  0
        -:   12:}
        -:   13:
function minus called 36 returned 100% blocks executed 100%
       36:   14:int minus(int a, int b){
       36:   15:    if(a<b){
       36:   15-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 16
       20:   16:        return 0;
       20:   16-block  0
        -:   17:    }
       16:   18:    return 1;
       16:   18-block  0
        -:   19:}
        -:   20:
function nplus called 36 returned 100% blocks executed 100%
       36:   21:int nplus(const char *a, const char* b){
       36:   22:    if(strcmp(a,b) > 0){
       36:   22-block  0
branch  0 taken 19 (fallthrough)
branch  1 taken 17
       19:   23:        return 0;
       19:   23-block  0
        -:   24:    }
       17:   25:    return 1;
       17:   25-block  0
        -:   26:}
        -:   27:
function nminus called 36 returned 100% blocks executed 100%
       36:   28:int nminus(const char* a, const char* b){
       36:   29:    if(strcmp(a,b) < 0){
       36:   29-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 21
       15:   30:        return 0;
       15:   30-block  0
        -:   31:    }
       21:   32:    return 1;
       21:   32-block  0
        -:   33:}
        -:   34:
        -:   35:struct service{
        -:   36:    repo* repo;
        -:   37:};
        -:   38:
function service_initialization called 2 returned 100% blocks executed 100%
        2:   39:service* service_initialization(repo* repo){
        2:   40:    service* srv = malloc(sizeof(service));
        2:   41:    srv->repo = repo;
        2:   42:    return srv;
        2:   42-block  0
        -:   43:}
        -:   44:
function service_destructor called 2 returned 100% blocks executed 100%
        2:   45:void service_destructor(service *srv){
        2:   46:    free(srv);
        2:   47:}
        -:   48:
function service_delete called 3 returned 100% blocks executed 100%
        3:   49:int service_delete(service* srv, char *id){
        3:   50:    if(!is_id(id))
        3:   50-block  0
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1:   51:        return 0;
        1:   51-block  0
        2:   52:    int numar = strtol(id, NULL, 0);
        2:   52-block  0
call    0 returned 2
        2:   53:    if(repo_delete(srv->repo, numar) == 1)
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:   54:        return 1;
        1:   54-block  0
        1:   55:    return 2;
        1:   55-block  0
        -:   56:}
        -:   57:
function service_show called 2 returned 100% blocks executed 100%
        2:   58:char* service_show(service* srv, char* scor){
        2:   59:    if(!is_score(scor))
        2:   59-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:   60:        return NULL;
        1:   60-block  0
        -:   61:
        -:   62:    type_participant *participant;
        1:   63:    int end = repo_get_size(srv->repo);
        1:   63-block  0
call    0 returned 1
        -:   64:
        1:   65:    int intscor = strtol(scor, NULL, 0);
call    0 returned 1
        -:   66:
        1:   67:    char *out = malloc(end * 300);
        1:   68:    out[0] = '\0';
        -:   69:    char cscor[4];
        6:   70:    for(int i = 0; i < end; i++){
        5:   70-block  0
        6:   70-block  1
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -:   71:
        5:   72:        participant = repo_get_by_id(srv->repo,i);
        5:   72-block  0
call    0 returned 5
        -:   73:
        5:   74:        if(get_scor(participant) >= intscor) {
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        5:   75:            strcat(out, get_nume(participant));
        5:   75-block  0
call    0 returned 5
        5:   76:            strcat(out, " ");
        5:   77:            strcat(out, get_prenume(participant));
call    0 returned 5
        -:   78:
        5:   79:            strcat(out, " ");
        -:   80:
        5:   81:            sprintf(cscor, "%d", get_scor(participant));
call    0 returned 5
call    1 returned 5
        -:   82:
        5:   83:            strcat(out, cscor);
        5:   84:            strcat(out, "/100\n");
        -:   85:
        -:   86:        }
        -:   87:    }
        1:   88:    return out;
        1:   88-block  0
        -:   89:}
        -:   90:
function service_sort called 7 returned 100% blocks executed 100%
        7:   91:int service_sort(service* srv, char* key, char* order){
        7:   92:    if(!(is_key(key) && is_order(order)))
        7:   92-block  0
call    0 returned 7
branch  1 taken 6 (fallthrough)
branch  2 taken 1
        6:   92-block  1
call    3 returned 6
branch  4 taken 2 (fallthrough)
branch  5 taken 4
        3:   93:        return 0;
        3:   93-block  0
        4:   94:    if(!strcmp(key, "scor")) {
        4:   94-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:   95:        if (!strcmp(order, "+"))
        2:   95-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   96:            repo_scor_sort(srv->repo, &plus);
        1:   96-block  0
call    0 returned 1
        -:   97:        else
        1:   98:            repo_scor_sort(srv->repo, &minus);
        1:   98-block  0
call    0 returned 1
        -:   99:    }
        -:  100:    else{
        2:  101:        if (!strcmp(order, "+"))
        2:  101-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  102:            repo_nume_sort(srv->repo, &nplus);
        1:  102-block  0
call    0 returned 1
        -:  103:        else
        1:  104:            repo_nume_sort(srv->repo, &nminus);
        1:  104-block  0
call    0 returned 1
        -:  105:    }
        -:  106:
        4:  107:    return 1;
        4:  107-block  0
        -:  108:}
        -:  109:
function service_debug called 1 returned 100% blocks executed 100%
        1:  110:char* service_debug(service* srv){
        1:  111:    int end = repo_get_size(srv->repo);
        1:  111-block  0
call    0 returned 1
        1:  112:    char *out = (char *) malloc(end*224);
        -:  113:    char scor[4];
        1:  114:    out[0] = 0;
        -:  115:    type_participant *participant;
        6:  116:    for(int i = 0; i < end; i++){
        6:  116-block  0
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:  117:        participant = repo_get_by_id(srv->repo,i);
        5:  117-block  0
call    0 returned 5
        5:  118:        strcat(out, get_nume(participant));
call    0 returned 5
        5:  119:        strcat(out, " ");
        5:  120:        strcat(out, get_prenume(participant));
call    0 returned 5
        5:  121:        strcat(out, " ");
        5:  122:        sprintf(scor,"%d", get_scor(participant));
call    0 returned 5
call    1 returned 5
        5:  123:        strcat(out, scor);
        5:  124:        strcat(out, "/100\n");
        -:  125:    }
        1:  126:    return out;
        1:  126-block  0
        -:  127:}
        -:  128:
function service_modify called 3 returned 100% blocks executed 100%
        3:  129:int service_modify(service* srv, char *id, char *nume, char *prenume, char *scor){
        3:  130:    if(!(is_name(nume) && is_name(prenume) && is_score(scor) && is_id(id)))
        3:  130-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3:  130-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        3:  130-block  2
call    6 returned 3
branch  7 taken 2 (fallthrough)
branch  8 taken 1
        2:  130-block  3
call    9 returned 2
branch 10 taken 0 (fallthrough)
branch 11 taken 2
        1:  131:        return 0;
        1:  131-block  0
        2:  132:    int numar = strtol(id, NULL, 0);
        2:  132-block  0
call    0 returned 2
        2:  133:    type_participant *participant = repo_get_by_id(srv->repo,numar);
call    0 returned 2
        2:  134:    if(participant == NULL)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  135:        return 2;
        1:  135-block  0
        1:  136:    numar = strtol(scor, NULL, 0);
        1:  136-block  0
call    0 returned 1
        1:  137:    set_nume(participant, nume);
call    0 returned 1
        1:  138:    set_prenume(participant, prenume);
call    0 returned 1
        1:  139:    set_scor(participant, numar);
call    0 returned 1
        1:  140:    return 1;
        -:  141:}
        -:  142:
function service_add called 2 returned 100% blocks executed 100%
        2:  143:int service_add(service* srv, char *nume, char *prenume, char *scor){
        2:  144:    if(!(is_name(nume) && is_name(prenume) && is_score(scor)))
        2:  144-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  144-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
        2:  144-block  2
call    6 returned 2
branch  7 taken 1 (fallthrough)
branch  8 taken 1
        1:  145:        return 0;
        1:  145-block  0
        1:  146:    int numar = strtol(scor, NULL, 0);
        1:  146-block  0
call    0 returned 1
        1:  147:    type_participant *participant = create_participant(nume, prenume, numar);
call    0 returned 1
        1:  148:    repo_add(srv->repo, participant);
call    0 returned 1
        1:  149:    return 1;
        -:  150:}
        -:  151:
function service_test called 1 returned 100% blocks executed 62%
        1:  152:void service_test(){
        1:  153:    repo* repo = repo_initialization();
        1:  153-block  0
call    0 returned 1
        1:  154:    service* srv = service_initialization(repo);
call    0 returned 1
        1:  155:    char* out = service_show(srv, "10");
call    0 returned 1
        -:  156:
       1*:  157:    assert(strlen(out) != 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  157-block  0
call    2 never executed
        1:  157-block  1
        1:  158:    free(out);
        1:  159:    out = service_debug(srv);
        1:  159-block  0
call    0 returned 1
       1*:  160:    assert(!strcmp(out, "Ciota Dragos 17/100\n"
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  160-block  0
call    2 never executed
        1:  160-block  1
        -:  161:                                       "Mircea Gabi 69/100\n"
        -:  162:                                       "Tzanca Uraganu 50/100\n"
        -:  163:                                       "Neamtu Iuli 99/100\n"
        -:  164:                                       "Moldovan Denis-Angel 10/100\n"));
        -:  165:
        1:  166:    free(out);
        -:  167:
       1*:  168:    assert(service_add(srv, "Oti" ,"Linux", "69") == 1);
        1:  168-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  168-block  1
call    3 never executed
        1:  168-block  2
       1*:  169:    assert(service_add(srv, "Oti" ,"Linux", "sasenoua") == 0);
        1:  169-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  169-block  1
call    3 never executed
        1:  169-block  2
        -:  170:
       1*:  171:    assert(service_modify(srv,"1", "Oti" ,"Linux", "sasenoua") == 0);
        1:  171-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  171-block  1
call    3 never executed
        1:  171-block  2
       1*:  172:    assert(service_modify(srv,"1", "Oti" ,"Linux", "26") == 1);
        1:  172-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  172-block  1
call    3 never executed
        1:  172-block  2
       1*:  173:    assert(service_modify(srv,"100", "Oti" ,"Linux", "10") == 2);
        1:  173-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  173-block  1
call    3 never executed
        1:  173-block  2
        -:  174:
       1*:  175:    assert(service_sort(srv, "Gabi", "GABITZU") == 0);
        1:  175-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  175-block  1
call    3 never executed
        1:  175-block  2
       1*:  176:    assert(service_sort(srv, "nume", "+"));
        1:  176-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  176-block  1
call    3 never executed
        1:  176-block  2
       1*:  177:    assert(!service_sort(srv, "nume", "da"));
        1:  177-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  177-block  1
call    3 never executed
        1:  177-block  2
       1*:  178:    assert(service_sort(srv, "nume", "-"));
        1:  178-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  178-block  1
call    3 never executed
        1:  178-block  2
       1*:  179:    assert(!service_sort(srv, "scor", "da"));
        1:  179-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  179-block  1
call    3 never executed
        1:  179-block  2
       1*:  180:    assert(service_sort(srv, "scor", "+"));
        1:  180-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  180-block  1
call    3 never executed
        1:  180-block  2
       1*:  181:    assert(service_sort(srv, "scor", "-"));
        1:  181-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  181-block  1
call    3 never executed
        1:  181-block  2
        -:  182:
       1*:  183:    assert(service_delete(srv, "1"));
        1:  183-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  183-block  1
call    3 never executed
        1:  183-block  2
       1*:  184:    assert(service_delete(srv, "100"));
        1:  184-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  184-block  1
call    3 never executed
        1:  184-block  2
       1*:  185:    assert(!service_delete(srv, "a1"));
        1:  185-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  185-block  1
call    3 never executed
        1:  185-block  2
        -:  186:
       1*:  187:    assert(service_show(srv, "ab") == NULL);
        1:  187-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  187-block  1
call    3 never executed
        1:  187-block  2
        -:  188:
        1:  189:    service_destructor(srv);
        1:  189-block  0
call    0 returned 1
        1:  190:    repo_destructor(repo);
call    0 returned 1
        1:  191:}
