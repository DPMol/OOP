        -:    0:Source:D:/Programming n shit/UBB/Anul 1/OOP/Lab3-4/Validators/validators.c
        -:    0:Graph:D:\Programming n shit\UBB\Anul 1\OOP\Lab3-4\cmake-build-debug-coverage\CMakeFiles\Lab3_4.dir\Validators\validators.c.gcno
        -:    0:Data:D:\Programming n shit\UBB\Anul 1\OOP\Lab3-4\cmake-build-debug-coverage\CMakeFiles\Lab3_4.dir\Validators\validators.c.gcda
        -:    0:Runs:1
        -:    1:#include "validators.h"
        -:    2:#include <ctype.h>
        -:    3:#include <stdlib.h>
        -:    4:#include "string.h"
        -:    5:#include <assert.h>
        -:    6:
        -:    7:char name_connectors[] = "- '";
function is_id called 7 returned 100% blocks executed 100%
        7:    8:int is_id(char *string){
        7:    9:    int index = 0;
       16:   10:    while(string[index] != 0)
        7:   10-block  0
       16:   10-block  1
branch  0 taken 11
branch  1 taken 5 (fallthrough)
        -:   11:    {
       11:   12:        if(!isdigit(string[index]))
       11:   12-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 9
        2:   13:            return 0;
        2:   13-block  0
        9:   14:        index++;
        9:   14-block  0
        -:   15:    }
        5:   16:    return 1;
        5:   16-block  0
        -:   17:}
        -:   18:
function is_score called 10 returned 100% blocks executed 100%
       10:   19:int is_score(char *string){
       10:   20:    int index = 0;
       22:   21:    while(string[index] != '\0')
       10:   21-block  0
       22:   21-block  1
branch  0 taken 16
branch  1 taken 6 (fallthrough)
        -:   22:    {
       16:   23:        if(!isdigit(string[index]))
       16:   23-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 12
        4:   24:            return 0;
        4:   24-block  0
       12:   25:        index++;
       12:   25-block  0
        -:   26:    }
        6:   27:    int number = atoi(string);
        6:   27-block  0
call    0 returned 6
        6:   28:    if(number > 100 || number < 10)
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:   28-block  0
branch  2 taken 1 (fallthrough)
branch  3 taken 5
        1:   29:        return 0;
        1:   29-block  0
        5:   30:    return 1;
        5:   30-block  0
        -:   31:}
        -:   32:
function is_name called 14 returned 100% blocks executed 100%
       14:   33:int is_name(char *string){
       14:   34:    if(strlen(string) > 50)
       14:   34-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 13
        1:   35:        return 0;
        1:   35-block  0
       13:   36:    int index = 0, i;
       60:   37:    while(string[index] != 0)
       13:   37-block  0
       60:   37-block  1
branch  0 taken 49
branch  1 taken 11 (fallthrough)
        -:   38:    {
       49:   39:        if(!isalpha(string[index])){
       49:   39-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 46
       10:   40:            for(i = 0; name_connectors[i] != '\0';i++)
        3:   40-block  0
        7:   40-block  1
       10:   40-block  2
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        8:   41:                if(string[index] == name_connectors[i])
        8:   41-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        1:   42:                    break;
        1:   42-block  0
        3:   43:            if(name_connectors[i] == '\0')
        3:   43-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   44:                return 0;
        2:   44-block  0
        -:   45:        }
       47:   46:        index++;
       47:   46-block  0
        -:   47:    }
       11:   48:    return 1;
       11:   48-block  0
        -:   49:}
        -:   50:
function is_key called 9 returned 100% blocks executed 100%
        9:   51:int is_key(char* string){
        9:   52:    if(strcmp(string, "nume") == 0 || strcmp(string, "scor")== 0)
        9:   52-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 4
        5:   52-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 2
        7:   53:        return 1;
        7:   53-block  0
        2:   54:    return 0;
        2:   54-block  0
        -:   55:}
        -:   56:
function is_order called 8 returned 100% blocks executed 100%
        8:   57:int is_order(char* string){
        8:   58:    if(strcmp(string, "+") == 0 || strcmp(string, "-")== 0)
        8:   58-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 3
        5:   58-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 3
        5:   59:        return 1;
        5:   59-block  0
        3:   60:    return 0;
        3:   60-block  0
        -:   61:}
        -:   62:
function valid_test called 1 returned 100% blocks executed 61%
        1:   63:void valid_test(){
       1*:   64:    assert(is_order("d") == 0);
        1:   64-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   64-block  1
call    3 never executed
        1:   64-block  2
       1*:   65:    assert(is_order("+") == 1);
        1:   65-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   65-block  1
call    3 never executed
        1:   65-block  2
        -:   66:
       1*:   67:    assert(is_key("d") == 0);
        1:   67-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   67-block  1
call    3 never executed
        1:   67-block  2
       1*:   68:    assert(is_key("nume") == 1);
        1:   68-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   68-block  1
call    3 never executed
        1:   68-block  2
        -:   69:
       1*:   70:    assert(is_id("1"));
        1:   70-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   70-block  1
call    3 never executed
        1:   70-block  2
       1*:   71:    assert(!is_id("abc"));
        1:   71-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   71-block  1
call    3 never executed
        1:   71-block  2
        -:   72:
       1*:   73:    assert(is_score("1") == 0);
        1:   73-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   73-block  1
call    3 never executed
        1:   73-block  2
       1*:   74:    assert(is_score("11"));
        1:   74-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   74-block  1
call    3 never executed
        1:   74-block  2
       1*:   75:    assert(is_score("1a") == 0);
        1:   75-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   75-block  1
call    3 never executed
        1:   75-block  2
        -:   76:
       1*:   77:    assert(is_name("ASD"));
        1:   77-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   77-block  1
call    3 never executed
        1:   77-block  2
       1*:   78:    assert(is_name("1") == 0);
        1:   78-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   78-block  1
call    3 never executed
        1:   78-block  2
       1*:   79:    assert(is_name("ABA 1") == 0);
        1:   79-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   79-block  1
call    3 never executed
        1:   79-block  2
       1*:   80:    assert(is_name("ABA 1asddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd") == 0);
        1:   80-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   80-block  1
call    3 never executed
        1:   80-block  2
        -:   81:
        1:   82:}
